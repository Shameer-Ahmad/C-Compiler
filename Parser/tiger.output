Terminals unused in grammar

    NEQ
    LT
    LE
    GT
    GE
    NIL


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: var_exp
    3    | int_exp
    4    | call_exp
    5    | exp PLUS exp
    6    | exp MINUS exp
    7    | exp TIMES exp
    8    | exp DIVIDE exp
    9    | record_exp
   10    | seq_exp
   11    | assign_exp
   12    | if_exp
   13    | while_exp
   14    | for_exp
   15    | break_exp
   16    | let_exp

   17 var_exp: var

   18 var: simple_var

   19 simple_var: ID

   20 int_exp: INT

   21 call_exp: ID LPAREN args RPAREN

   22 args: ε
   23     | exp_list

   24 exp_list: exp
   25         | exp_list COMMA exp

   26 exp_seq: exp
   27        | exp_seq SEMICOLON exp

   28 record_exp: ID LBRACE efield_list RBRACE

   29 field_list: ε
   30           | field_list_nonempty

   31 field_list_nonempty: field
   32                    | field_list_nonempty COMMA field

   33 field: ID COLON ID

   34 efield_list: ε
   35            | efield_list_nonempty

   36 efield_list_nonempty: efield
   37                     | efield_list_nonempty COMMA efield

   38 efield: ID EQ exp

   39 seq_exp: LPAREN exp_seq RPAREN

   40 assign_exp: var ASSIGN exp

   41 if_exp: IF exp THEN exp
   42       | IF exp THEN exp ELSE exp

   43 while_exp: WHILE exp DO exp

   44 for_exp: FOR ID ASSIGN exp TO exp DO exp

   45 break_exp: BREAK

   46 let_exp: LET dec_list IN exp_list END

   47 dec_list: ε
   48         | dec_list_nonempty

   49 dec_list_nonempty: dec
   50                  | dec_list_nonempty dec

   51 dec: type_dec
   52    | var_dec
   53    | func_dec

   54 type_dec: TYPE ID EQ ty

   55 ty: ID
   56   | LBRACE field_list RBRACE
   57   | ARRAY OF ID

   58 var_dec: VAR ID ASSIGN exp
   59        | VAR ID COLON ID ASSIGN exp

   60 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ exp
   61         | FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 19 21 28 33 38 44 54 55 57 58 59 60 61
    INT <ival> (259) 20
    PLUS (260) 5
    MINUS (261) 6
    TIMES (262) 7
    DIVIDE (263) 8
    EQ (264) 38 54 60 61
    NEQ (265)
    LT (266)
    LE (267)
    GT (268)
    GE (269)
    ASSIGN (270) 40 44 58 59
    ARRAY (271) 57
    IF (272) 41 42
    THEN (273) 41 42
    ELSE (274) 42
    WHILE (275) 43
    FOR (276) 44
    TO (277) 44
    DO (278) 43 44
    LET (279) 46
    IN (280) 46
    END (281) 46
    OF (282) 57
    BREAK (283) 45
    NIL (284)
    FUNCTION (285) 60 61
    VAR (286) 58 59
    TYPE (287) 54
    LPAREN (288) 21 39 60 61
    RPAREN (289) 21 39 60 61
    COMMA (290) 25 32 37
    COLON (291) 33 59 61
    SEMICOLON (292) 27
    LBRACE (293) 28 56
    RBRACE (294) 28 56
    LOW_PRECEDENCE (295)
    LOWER_THAN_ELSE (296)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    program <exp> (43)
        on left: 1
        on right: 0
    exp <exp> (44)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
        on right: 1 5 6 7 8 24 25 26 27 38 40 41 42 43 44 58 59 60 61
    var_exp <var> (45)
        on left: 17
        on right: 2
    var <var> (46)
        on left: 18
        on right: 17 40
    simple_var <var> (47)
        on left: 19
        on right: 18
    int_exp <exp> (48)
        on left: 20
        on right: 3
    call_exp <exp> (49)
        on left: 21
        on right: 4
    args <explist> (50)
        on left: 22 23
        on right: 21
    exp_list <explist> (51)
        on left: 24 25
        on right: 23 25 46
    exp_seq <explist> (52)
        on left: 26 27
        on right: 27 39
    record_exp <exp> (53)
        on left: 28
        on right: 9
    field_list <fieldlist> (54)
        on left: 29 30
        on right: 56 60 61
    field_list_nonempty <fieldlist> (55)
        on left: 31 32
        on right: 30 32
    field <field> (56)
        on left: 33
        on right: 31 32
    efield_list <efieldlist> (57)
        on left: 34 35
        on right: 28
    efield_list_nonempty <efieldlist> (58)
        on left: 36 37
        on right: 35 37
    efield <efield> (59)
        on left: 38
        on right: 36 37
    seq_exp <exp> (60)
        on left: 39
        on right: 10
    assign_exp <exp> (61)
        on left: 40
        on right: 11
    if_exp <exp> (62)
        on left: 41 42
        on right: 12
    while_exp <exp> (63)
        on left: 43
        on right: 13
    for_exp <exp> (64)
        on left: 44
        on right: 14
    break_exp <exp> (65)
        on left: 45
        on right: 15
    let_exp <exp> (66)
        on left: 46
        on right: 16
    dec_list <declist> (67)
        on left: 47 48
        on right: 46
    dec_list_nonempty <declist> (68)
        on left: 49 50
        on right: 48 50
    dec <dec> (69)
        on left: 51 52 53
        on right: 49 50
    type_dec <dec> (70)
        on left: 54
        on right: 51
    ty <type> (71)
        on left: 55 56 57
        on right: 54
    var_dec <dec> (72)
        on left: 58 59
        on right: 52
    func_dec <dec> (73)
        on left: 60 61
        on right: 53


State 0

    0 $accept: • program $end

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    program     go to state 9
    exp         go to state 10
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 1

   19 simple_var: ID •
   21 call_exp: ID • LPAREN args RPAREN
   28 record_exp: ID • LBRACE efield_list RBRACE

    LPAREN  shift, and go to state 24
    LBRACE  shift, and go to state 25

    $default  reduce using rule 19 (simple_var)


State 2

   20 int_exp: INT •

    $default  reduce using rule 20 (int_exp)


State 3

   41 if_exp: IF • exp THEN exp
   42       | IF • exp THEN exp ELSE exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 26
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 4

   43 while_exp: WHILE • exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 27
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 5

   44 for_exp: FOR • ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 28


State 6

   46 let_exp: LET • dec_list IN exp_list END

    FUNCTION  shift, and go to state 29
    VAR       shift, and go to state 30
    TYPE      shift, and go to state 31

    $default  reduce using rule 47 (dec_list)

    dec_list           go to state 32
    dec_list_nonempty  go to state 33
    dec                go to state 34
    type_dec           go to state 35
    var_dec            go to state 36
    func_dec           go to state 37


State 7

   45 break_exp: BREAK •

    $default  reduce using rule 45 (break_exp)


State 8

   39 seq_exp: LPAREN • exp_seq RPAREN

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 38
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    exp_seq     go to state 39
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 9

    0 $accept: program • $end

    $end  shift, and go to state 40


State 10

    1 program: exp •
    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 1 (program)


State 11

    2 exp: var_exp •

    $default  reduce using rule 2 (exp)


State 12

   17 var_exp: var •
   40 assign_exp: var • ASSIGN exp

    ASSIGN  shift, and go to state 45

    $default  reduce using rule 17 (var_exp)


State 13

   18 var: simple_var •

    $default  reduce using rule 18 (var)


State 14

    3 exp: int_exp •

    $default  reduce using rule 3 (exp)


State 15

    4 exp: call_exp •

    $default  reduce using rule 4 (exp)


State 16

    9 exp: record_exp •

    $default  reduce using rule 9 (exp)


State 17

   10 exp: seq_exp •

    $default  reduce using rule 10 (exp)


State 18

   11 exp: assign_exp •

    $default  reduce using rule 11 (exp)


State 19

   12 exp: if_exp •

    $default  reduce using rule 12 (exp)


State 20

   13 exp: while_exp •

    $default  reduce using rule 13 (exp)


State 21

   14 exp: for_exp •

    $default  reduce using rule 14 (exp)


State 22

   15 exp: break_exp •

    $default  reduce using rule 15 (exp)


State 23

   16 exp: let_exp •

    $default  reduce using rule 16 (exp)


State 24

   21 call_exp: ID LPAREN • args RPAREN

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    $default  reduce using rule 22 (args)

    exp         go to state 46
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    args        go to state 47
    exp_list    go to state 48
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 25

   28 record_exp: ID LBRACE • efield_list RBRACE

    ID  shift, and go to state 49

    $default  reduce using rule 34 (efield_list)

    efield_list           go to state 50
    efield_list_nonempty  go to state 51
    efield                go to state 52


State 26

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   41 if_exp: IF exp • THEN exp
   42       | IF exp • THEN exp ELSE exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    THEN    shift, and go to state 53


State 27

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   43 while_exp: WHILE exp • DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    DO      shift, and go to state 54


State 28

   44 for_exp: FOR ID • ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 55


State 29

   60 func_dec: FUNCTION • ID LPAREN field_list RPAREN EQ exp
   61         | FUNCTION • ID LPAREN field_list RPAREN COLON ID EQ exp

    ID  shift, and go to state 56


State 30

   58 var_dec: VAR • ID ASSIGN exp
   59        | VAR • ID COLON ID ASSIGN exp

    ID  shift, and go to state 57


State 31

   54 type_dec: TYPE • ID EQ ty

    ID  shift, and go to state 58


State 32

   46 let_exp: LET dec_list • IN exp_list END

    IN  shift, and go to state 59


State 33

   48 dec_list: dec_list_nonempty •
   50 dec_list_nonempty: dec_list_nonempty • dec

    FUNCTION  shift, and go to state 29
    VAR       shift, and go to state 30
    TYPE      shift, and go to state 31

    $default  reduce using rule 48 (dec_list)

    dec       go to state 60
    type_dec  go to state 35
    var_dec   go to state 36
    func_dec  go to state 37


State 34

   49 dec_list_nonempty: dec •

    $default  reduce using rule 49 (dec_list_nonempty)


State 35

   51 dec: type_dec •

    $default  reduce using rule 51 (dec)


State 36

   52 dec: var_dec •

    $default  reduce using rule 52 (dec)


State 37

   53 dec: func_dec •

    $default  reduce using rule 53 (dec)


State 38

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   26 exp_seq: exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 26 (exp_seq)


State 39

   27 exp_seq: exp_seq • SEMICOLON exp
   39 seq_exp: LPAREN exp_seq • RPAREN

    RPAREN     shift, and go to state 61
    SEMICOLON  shift, and go to state 62


State 40

    0 $accept: program $end •

    $default  accept


State 41

    5 exp: exp PLUS • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 63
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 42

    6 exp: exp MINUS • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 64
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 43

    7 exp: exp TIMES • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 65
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 44

    8 exp: exp DIVIDE • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 66
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 45

   40 assign_exp: var ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 67
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 46

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   24 exp_list: exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 24 (exp_list)


State 47

   21 call_exp: ID LPAREN args • RPAREN

    RPAREN  shift, and go to state 68


State 48

   23 args: exp_list •
   25 exp_list: exp_list • COMMA exp

    COMMA  shift, and go to state 69

    $default  reduce using rule 23 (args)


State 49

   38 efield: ID • EQ exp

    EQ  shift, and go to state 70


State 50

   28 record_exp: ID LBRACE efield_list • RBRACE

    RBRACE  shift, and go to state 71


State 51

   35 efield_list: efield_list_nonempty •
   37 efield_list_nonempty: efield_list_nonempty • COMMA efield

    COMMA  shift, and go to state 72

    $default  reduce using rule 35 (efield_list)


State 52

   36 efield_list_nonempty: efield •

    $default  reduce using rule 36 (efield_list_nonempty)


State 53

   41 if_exp: IF exp THEN • exp
   42       | IF exp THEN • exp ELSE exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 73
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 54

   43 while_exp: WHILE exp DO • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 74
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 55

   44 for_exp: FOR ID ASSIGN • exp TO exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 75
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 56

   60 func_dec: FUNCTION ID • LPAREN field_list RPAREN EQ exp
   61         | FUNCTION ID • LPAREN field_list RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 76


State 57

   58 var_dec: VAR ID • ASSIGN exp
   59        | VAR ID • COLON ID ASSIGN exp

    ASSIGN  shift, and go to state 77
    COLON   shift, and go to state 78


State 58

   54 type_dec: TYPE ID • EQ ty

    EQ  shift, and go to state 79


State 59

   46 let_exp: LET dec_list IN • exp_list END

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 46
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    exp_list    go to state 80
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 60

   50 dec_list_nonempty: dec_list_nonempty dec •

    $default  reduce using rule 50 (dec_list_nonempty)


State 61

   39 seq_exp: LPAREN exp_seq RPAREN •

    $default  reduce using rule 39 (seq_exp)


State 62

   27 exp_seq: exp_seq SEMICOLON • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 81
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 63

    5 exp: exp • PLUS exp
    5    | exp PLUS exp •
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 5 (exp)


State 64

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    6    | exp MINUS exp •
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 6 (exp)


State 65

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    7    | exp TIMES exp •
    8    | exp • DIVIDE exp

    $default  reduce using rule 7 (exp)


State 66

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
    8    | exp DIVIDE exp •

    $default  reduce using rule 8 (exp)


State 67

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   40 assign_exp: var ASSIGN exp •

    $default  reduce using rule 40 (assign_exp)


State 68

   21 call_exp: ID LPAREN args RPAREN •

    $default  reduce using rule 21 (call_exp)


State 69

   25 exp_list: exp_list COMMA • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 82
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 70

   38 efield: ID EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 83
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 71

   28 record_exp: ID LBRACE efield_list RBRACE •

    $default  reduce using rule 28 (record_exp)


State 72

   37 efield_list_nonempty: efield_list_nonempty COMMA • efield

    ID  shift, and go to state 49

    efield  go to state 84


State 73

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   41 if_exp: IF exp THEN exp •
   42       | IF exp THEN exp • ELSE exp

    ELSE  shift, and go to state 85

    $default  reduce using rule 41 (if_exp)


State 74

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   43 while_exp: WHILE exp DO exp •

    $default  reduce using rule 43 (while_exp)


State 75

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   44 for_exp: FOR ID ASSIGN exp • TO exp DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    TO      shift, and go to state 86


State 76

   60 func_dec: FUNCTION ID LPAREN • field_list RPAREN EQ exp
   61         | FUNCTION ID LPAREN • field_list RPAREN COLON ID EQ exp

    ID  shift, and go to state 87

    $default  reduce using rule 29 (field_list)

    field_list           go to state 88
    field_list_nonempty  go to state 89
    field                go to state 90


State 77

   58 var_dec: VAR ID ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 91
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 78

   59 var_dec: VAR ID COLON • ID ASSIGN exp

    ID  shift, and go to state 92


State 79

   54 type_dec: TYPE ID EQ • ty

    ID      shift, and go to state 93
    ARRAY   shift, and go to state 94
    LBRACE  shift, and go to state 95

    ty  go to state 96


State 80

   25 exp_list: exp_list • COMMA exp
   46 let_exp: LET dec_list IN exp_list • END

    END    shift, and go to state 97
    COMMA  shift, and go to state 69


State 81

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   27 exp_seq: exp_seq SEMICOLON exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 27 (exp_seq)


State 82

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   25 exp_list: exp_list COMMA exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 25 (exp_list)


State 83

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   38 efield: ID EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 38 (efield)


State 84

   37 efield_list_nonempty: efield_list_nonempty COMMA efield •

    $default  reduce using rule 37 (efield_list_nonempty)


State 85

   42 if_exp: IF exp THEN exp ELSE • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 98
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 86

   44 for_exp: FOR ID ASSIGN exp TO • exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 99
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 87

   33 field: ID • COLON ID

    COLON  shift, and go to state 100


State 88

   60 func_dec: FUNCTION ID LPAREN field_list • RPAREN EQ exp
   61         | FUNCTION ID LPAREN field_list • RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 101


State 89

   30 field_list: field_list_nonempty •
   32 field_list_nonempty: field_list_nonempty • COMMA field

    COMMA  shift, and go to state 102

    $default  reduce using rule 30 (field_list)


State 90

   31 field_list_nonempty: field •

    $default  reduce using rule 31 (field_list_nonempty)


State 91

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   58 var_dec: VAR ID ASSIGN exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 58 (var_dec)


State 92

   59 var_dec: VAR ID COLON ID • ASSIGN exp

    ASSIGN  shift, and go to state 103


State 93

   55 ty: ID •

    $default  reduce using rule 55 (ty)


State 94

   57 ty: ARRAY • OF ID

    OF  shift, and go to state 104


State 95

   56 ty: LBRACE • field_list RBRACE

    ID  shift, and go to state 87

    $default  reduce using rule 29 (field_list)

    field_list           go to state 105
    field_list_nonempty  go to state 89
    field                go to state 90


State 96

   54 type_dec: TYPE ID EQ ty •

    $default  reduce using rule 54 (type_dec)


State 97

   46 let_exp: LET dec_list IN exp_list END •

    $default  reduce using rule 46 (let_exp)


State 98

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   42 if_exp: IF exp THEN exp ELSE exp •

    $default  reduce using rule 42 (if_exp)


State 99

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   44 for_exp: FOR ID ASSIGN exp TO exp • DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    DO      shift, and go to state 106


State 100

   33 field: ID COLON • ID

    ID  shift, and go to state 107


State 101

   60 func_dec: FUNCTION ID LPAREN field_list RPAREN • EQ exp
   61         | FUNCTION ID LPAREN field_list RPAREN • COLON ID EQ exp

    EQ     shift, and go to state 108
    COLON  shift, and go to state 109


State 102

   32 field_list_nonempty: field_list_nonempty COMMA • field

    ID  shift, and go to state 87

    field  go to state 110


State 103

   59 var_dec: VAR ID COLON ID ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 111
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 104

   57 ty: ARRAY OF • ID

    ID  shift, and go to state 112


State 105

   56 ty: LBRACE field_list • RBRACE

    RBRACE  shift, and go to state 113


State 106

   44 for_exp: FOR ID ASSIGN exp TO exp DO • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 114
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 107

   33 field: ID COLON ID •

    $default  reduce using rule 33 (field)


State 108

   60 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 115
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 109

   61 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON • ID EQ exp

    ID  shift, and go to state 116


State 110

   32 field_list_nonempty: field_list_nonempty COMMA field •

    $default  reduce using rule 32 (field_list_nonempty)


State 111

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   59 var_dec: VAR ID COLON ID ASSIGN exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 59 (var_dec)


State 112

   57 ty: ARRAY OF ID •

    $default  reduce using rule 57 (ty)


State 113

   56 ty: LBRACE field_list RBRACE •

    $default  reduce using rule 56 (ty)


State 114

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   44 for_exp: FOR ID ASSIGN exp TO exp DO exp •

    $default  reduce using rule 44 (for_exp)


State 115

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   60 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 60 (func_dec)


State 116

   61 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID • EQ exp

    EQ  shift, and go to state 117


State 117

   61 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 118
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 118

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   61 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 61 (func_dec)
