Terminals unused in grammar

    NEQ
    LT
    LE
    GT
    GE
    NIL


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: var_exp
    3    | int_exp
    4    | call_exp
    5    | exp PLUS exp
    6    | exp MINUS exp
    7    | exp TIMES exp
    8    | exp DIVIDE exp
    9    | record_exp
   10    | seq_exp
   11    | assign_exp
   12    | if_exp
   13    | while_exp
   14    | for_exp
   15    | break_exp
   16    | let_exp

   17 var_exp: var

   18 var: simple_var

   19 simple_var: ID

   20 int_exp: INT

   21 call_exp: ID LPAREN args RPAREN

   22 args: ε
   23     | exp_list

   24 exp_list: exp
   25         | exp_list COMMA exp

   26 record_exp: ID LBRACE field_list RBRACE

   27 field_list: ε
   28           | field_list_nonempty

   29 field_list_nonempty: field
   30                    | field_list_nonempty COMMA field

   31 field: ID EQ exp

   32 seq_exp: LPAREN exp_list RPAREN

   33 assign_exp: var ASSIGN exp

   34 if_exp: IF exp THEN exp
   35       | IF exp THEN exp ELSE exp

   36 while_exp: WHILE exp DO exp

   37 for_exp: FOR ID ASSIGN exp TO exp DO exp

   38 break_exp: BREAK

   39 let_exp: LET dec_list IN exp_list END

   40 dec_list: ε
   41         | dec_list_nonempty

   42 dec_list_nonempty: dec
   43                  | dec_list_nonempty dec

   44 dec: type_dec
   45    | var_dec
   46    | func_dec

   47 type_dec: TYPE ID EQ ty

   48 ty: ID
   49   | LBRACE field_list RBRACE
   50   | ARRAY OF ID

   51 var_dec: VAR ID ASSIGN exp
   52        | VAR ID COLON ID ASSIGN exp

   53 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ exp
   54         | FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 19 21 26 31 37 47 48 50 51 52 53 54
    INT <ival> (259) 20
    PLUS (260) 5
    MINUS (261) 6
    TIMES (262) 7
    DIVIDE (263) 8
    EQ (264) 31 47 53 54
    NEQ (265)
    LT (266)
    LE (267)
    GT (268)
    GE (269)
    ASSIGN (270) 33 37 51 52
    ARRAY (271) 50
    IF (272) 34 35
    THEN (273) 34 35
    ELSE (274) 35
    WHILE (275) 36
    FOR (276) 37
    TO (277) 37
    DO (278) 36 37
    LET (279) 39
    IN (280) 39
    END (281) 39
    OF (282) 50
    BREAK (283) 38
    NIL (284)
    FUNCTION (285) 53 54
    VAR (286) 51 52
    TYPE (287) 47
    LPAREN (288) 21 32 53 54
    RPAREN (289) 21 32 53 54
    COMMA (290) 25 30
    COLON (291) 52 54
    LBRACE (292) 26 49
    RBRACE (293) 26 49
    LOW_PRECEDENCE (294)
    LOWER_THAN_ELSE (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program <exp> (42)
        on left: 1
        on right: 0
    exp <exp> (43)
        on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
        on right: 1 5 6 7 8 24 25 31 33 34 35 36 37 51 52 53 54
    var_exp <var> (44)
        on left: 17
        on right: 2
    var <var> (45)
        on left: 18
        on right: 17 33
    simple_var <var> (46)
        on left: 19
        on right: 18
    int_exp <exp> (47)
        on left: 20
        on right: 3
    call_exp <exp> (48)
        on left: 21
        on right: 4
    args <explist> (49)
        on left: 22 23
        on right: 21
    exp_list <explist> (50)
        on left: 24 25
        on right: 23 25 32 39
    record_exp <exp> (51)
        on left: 26
        on right: 9
    field_list <fieldlist> (52)
        on left: 27 28
        on right: 26 49 53 54
    field_list_nonempty <fieldlist> (53)
        on left: 29 30
        on right: 28 30
    field <field> (54)
        on left: 31
        on right: 29 30
    seq_exp <exp> (55)
        on left: 32
        on right: 10
    assign_exp <exp> (56)
        on left: 33
        on right: 11
    if_exp <exp> (57)
        on left: 34 35
        on right: 12
    while_exp <exp> (58)
        on left: 36
        on right: 13
    for_exp <exp> (59)
        on left: 37
        on right: 14
    break_exp <exp> (60)
        on left: 38
        on right: 15
    let_exp <exp> (61)
        on left: 39
        on right: 16
    dec_list <declist> (62)
        on left: 40 41
        on right: 39
    dec_list_nonempty <declist> (63)
        on left: 42 43
        on right: 41 43
    dec <dec> (64)
        on left: 44 45 46
        on right: 42 43
    type_dec <dec> (65)
        on left: 47
        on right: 44
    ty <type> (66)
        on left: 48 49 50
        on right: 47
    var_dec <dec> (67)
        on left: 51 52
        on right: 45
    func_dec <dec> (68)
        on left: 53 54
        on right: 46


State 0

    0 $accept: • program $end

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    program     go to state 9
    exp         go to state 10
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 1

   19 simple_var: ID •
   21 call_exp: ID • LPAREN args RPAREN
   26 record_exp: ID • LBRACE field_list RBRACE

    LPAREN  shift, and go to state 24
    LBRACE  shift, and go to state 25

    $default  reduce using rule 19 (simple_var)


State 2

   20 int_exp: INT •

    $default  reduce using rule 20 (int_exp)


State 3

   34 if_exp: IF • exp THEN exp
   35       | IF • exp THEN exp ELSE exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 26
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 4

   36 while_exp: WHILE • exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 27
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 5

   37 for_exp: FOR • ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 28


State 6

   39 let_exp: LET • dec_list IN exp_list END

    FUNCTION  shift, and go to state 29
    VAR       shift, and go to state 30
    TYPE      shift, and go to state 31

    $default  reduce using rule 40 (dec_list)

    dec_list           go to state 32
    dec_list_nonempty  go to state 33
    dec                go to state 34
    type_dec           go to state 35
    var_dec            go to state 36
    func_dec           go to state 37


State 7

   38 break_exp: BREAK •

    $default  reduce using rule 38 (break_exp)


State 8

   32 seq_exp: LPAREN • exp_list RPAREN

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 38
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    exp_list    go to state 39
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 9

    0 $accept: program • $end

    $end  shift, and go to state 40


State 10

    1 program: exp •
    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 1 (program)


State 11

    2 exp: var_exp •

    $default  reduce using rule 2 (exp)


State 12

   17 var_exp: var •
   33 assign_exp: var • ASSIGN exp

    ASSIGN  shift, and go to state 45

    $default  reduce using rule 17 (var_exp)


State 13

   18 var: simple_var •

    $default  reduce using rule 18 (var)


State 14

    3 exp: int_exp •

    $default  reduce using rule 3 (exp)


State 15

    4 exp: call_exp •

    $default  reduce using rule 4 (exp)


State 16

    9 exp: record_exp •

    $default  reduce using rule 9 (exp)


State 17

   10 exp: seq_exp •

    $default  reduce using rule 10 (exp)


State 18

   11 exp: assign_exp •

    $default  reduce using rule 11 (exp)


State 19

   12 exp: if_exp •

    $default  reduce using rule 12 (exp)


State 20

   13 exp: while_exp •

    $default  reduce using rule 13 (exp)


State 21

   14 exp: for_exp •

    $default  reduce using rule 14 (exp)


State 22

   15 exp: break_exp •

    $default  reduce using rule 15 (exp)


State 23

   16 exp: let_exp •

    $default  reduce using rule 16 (exp)


State 24

   21 call_exp: ID LPAREN • args RPAREN

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    $default  reduce using rule 22 (args)

    exp         go to state 38
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    args        go to state 46
    exp_list    go to state 47
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 25

   26 record_exp: ID LBRACE • field_list RBRACE

    ID  shift, and go to state 48

    $default  reduce using rule 27 (field_list)

    field_list           go to state 49
    field_list_nonempty  go to state 50
    field                go to state 51


State 26

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   34 if_exp: IF exp • THEN exp
   35       | IF exp • THEN exp ELSE exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    THEN    shift, and go to state 52


State 27

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   36 while_exp: WHILE exp • DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    DO      shift, and go to state 53


State 28

   37 for_exp: FOR ID • ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 54


State 29

   53 func_dec: FUNCTION • ID LPAREN field_list RPAREN EQ exp
   54         | FUNCTION • ID LPAREN field_list RPAREN COLON ID EQ exp

    ID  shift, and go to state 55


State 30

   51 var_dec: VAR • ID ASSIGN exp
   52        | VAR • ID COLON ID ASSIGN exp

    ID  shift, and go to state 56


State 31

   47 type_dec: TYPE • ID EQ ty

    ID  shift, and go to state 57


State 32

   39 let_exp: LET dec_list • IN exp_list END

    IN  shift, and go to state 58


State 33

   41 dec_list: dec_list_nonempty •
   43 dec_list_nonempty: dec_list_nonempty • dec

    FUNCTION  shift, and go to state 29
    VAR       shift, and go to state 30
    TYPE      shift, and go to state 31

    $default  reduce using rule 41 (dec_list)

    dec       go to state 59
    type_dec  go to state 35
    var_dec   go to state 36
    func_dec  go to state 37


State 34

   42 dec_list_nonempty: dec •

    $default  reduce using rule 42 (dec_list_nonempty)


State 35

   44 dec: type_dec •

    $default  reduce using rule 44 (dec)


State 36

   45 dec: var_dec •

    $default  reduce using rule 45 (dec)


State 37

   46 dec: func_dec •

    $default  reduce using rule 46 (dec)


State 38

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   24 exp_list: exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 24 (exp_list)


State 39

   25 exp_list: exp_list • COMMA exp
   32 seq_exp: LPAREN exp_list • RPAREN

    RPAREN  shift, and go to state 60
    COMMA   shift, and go to state 61


State 40

    0 $accept: program $end •

    $default  accept


State 41

    5 exp: exp PLUS • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 62
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 42

    6 exp: exp MINUS • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 63
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 43

    7 exp: exp TIMES • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 64
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 44

    8 exp: exp DIVIDE • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 65
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 45

   33 assign_exp: var ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 66
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 46

   21 call_exp: ID LPAREN args • RPAREN

    RPAREN  shift, and go to state 67


State 47

   23 args: exp_list •
   25 exp_list: exp_list • COMMA exp

    COMMA  shift, and go to state 61

    $default  reduce using rule 23 (args)


State 48

   31 field: ID • EQ exp

    EQ  shift, and go to state 68


State 49

   26 record_exp: ID LBRACE field_list • RBRACE

    RBRACE  shift, and go to state 69


State 50

   28 field_list: field_list_nonempty •
   30 field_list_nonempty: field_list_nonempty • COMMA field

    COMMA  shift, and go to state 70

    $default  reduce using rule 28 (field_list)


State 51

   29 field_list_nonempty: field •

    $default  reduce using rule 29 (field_list_nonempty)


State 52

   34 if_exp: IF exp THEN • exp
   35       | IF exp THEN • exp ELSE exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 71
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 53

   36 while_exp: WHILE exp DO • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 72
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 54

   37 for_exp: FOR ID ASSIGN • exp TO exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 73
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 55

   53 func_dec: FUNCTION ID • LPAREN field_list RPAREN EQ exp
   54         | FUNCTION ID • LPAREN field_list RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 74


State 56

   51 var_dec: VAR ID • ASSIGN exp
   52        | VAR ID • COLON ID ASSIGN exp

    ASSIGN  shift, and go to state 75
    COLON   shift, and go to state 76


State 57

   47 type_dec: TYPE ID • EQ ty

    EQ  shift, and go to state 77


State 58

   39 let_exp: LET dec_list IN • exp_list END

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 38
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    exp_list    go to state 78
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 59

   43 dec_list_nonempty: dec_list_nonempty dec •

    $default  reduce using rule 43 (dec_list_nonempty)


State 60

   32 seq_exp: LPAREN exp_list RPAREN •

    $default  reduce using rule 32 (seq_exp)


State 61

   25 exp_list: exp_list COMMA • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 79
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 62

    5 exp: exp • PLUS exp
    5    | exp PLUS exp •
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 5 (exp)


State 63

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    6    | exp MINUS exp •
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp

    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 6 (exp)


State 64

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    7    | exp TIMES exp •
    8    | exp • DIVIDE exp

    $default  reduce using rule 7 (exp)


State 65

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
    8    | exp DIVIDE exp •

    $default  reduce using rule 8 (exp)


State 66

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   33 assign_exp: var ASSIGN exp •

    $default  reduce using rule 33 (assign_exp)


State 67

   21 call_exp: ID LPAREN args RPAREN •

    $default  reduce using rule 21 (call_exp)


State 68

   31 field: ID EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 80
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 69

   26 record_exp: ID LBRACE field_list RBRACE •

    $default  reduce using rule 26 (record_exp)


State 70

   30 field_list_nonempty: field_list_nonempty COMMA • field

    ID  shift, and go to state 48

    field  go to state 81


State 71

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   34 if_exp: IF exp THEN exp •
   35       | IF exp THEN exp • ELSE exp

    ELSE  shift, and go to state 82

    $default  reduce using rule 34 (if_exp)


State 72

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   36 while_exp: WHILE exp DO exp •

    $default  reduce using rule 36 (while_exp)


State 73

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   37 for_exp: FOR ID ASSIGN exp • TO exp DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    TO      shift, and go to state 83


State 74

   53 func_dec: FUNCTION ID LPAREN • field_list RPAREN EQ exp
   54         | FUNCTION ID LPAREN • field_list RPAREN COLON ID EQ exp

    ID  shift, and go to state 48

    $default  reduce using rule 27 (field_list)

    field_list           go to state 84
    field_list_nonempty  go to state 50
    field                go to state 51


State 75

   51 var_dec: VAR ID ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 85
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 76

   52 var_dec: VAR ID COLON • ID ASSIGN exp

    ID  shift, and go to state 86


State 77

   47 type_dec: TYPE ID EQ • ty

    ID      shift, and go to state 87
    ARRAY   shift, and go to state 88
    LBRACE  shift, and go to state 89

    ty  go to state 90


State 78

   25 exp_list: exp_list • COMMA exp
   39 let_exp: LET dec_list IN exp_list • END

    END    shift, and go to state 91
    COMMA  shift, and go to state 61


State 79

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   25 exp_list: exp_list COMMA exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 25 (exp_list)


State 80

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   31 field: ID EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 31 (field)


State 81

   30 field_list_nonempty: field_list_nonempty COMMA field •

    $default  reduce using rule 30 (field_list_nonempty)


State 82

   35 if_exp: IF exp THEN exp ELSE • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 92
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 83

   37 for_exp: FOR ID ASSIGN exp TO • exp DO exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 93
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 84

   53 func_dec: FUNCTION ID LPAREN field_list • RPAREN EQ exp
   54         | FUNCTION ID LPAREN field_list • RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 94


State 85

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   51 var_dec: VAR ID ASSIGN exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 51 (var_dec)


State 86

   52 var_dec: VAR ID COLON ID • ASSIGN exp

    ASSIGN  shift, and go to state 95


State 87

   48 ty: ID •

    $default  reduce using rule 48 (ty)


State 88

   50 ty: ARRAY • OF ID

    OF  shift, and go to state 96


State 89

   49 ty: LBRACE • field_list RBRACE

    ID  shift, and go to state 48

    $default  reduce using rule 27 (field_list)

    field_list           go to state 97
    field_list_nonempty  go to state 50
    field                go to state 51


State 90

   47 type_dec: TYPE ID EQ ty •

    $default  reduce using rule 47 (type_dec)


State 91

   39 let_exp: LET dec_list IN exp_list END •

    $default  reduce using rule 39 (let_exp)


State 92

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   35 if_exp: IF exp THEN exp ELSE exp •

    $default  reduce using rule 35 (if_exp)


State 93

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   37 for_exp: FOR ID ASSIGN exp TO exp • DO exp

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44
    DO      shift, and go to state 98


State 94

   53 func_dec: FUNCTION ID LPAREN field_list RPAREN • EQ exp
   54         | FUNCTION ID LPAREN field_list RPAREN • COLON ID EQ exp

    EQ     shift, and go to state 99
    COLON  shift, and go to state 100


State 95

   52 var_dec: VAR ID COLON ID ASSIGN • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 101
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 96

   50 ty: ARRAY OF • ID

    ID  shift, and go to state 102


State 97

   49 ty: LBRACE field_list • RBRACE

    RBRACE  shift, and go to state 103


State 98

   37 for_exp: FOR ID ASSIGN exp TO exp DO • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 104
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 99

   53 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 105
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 100

   54 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON • ID EQ exp

    ID  shift, and go to state 106


State 101

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   52 var_dec: VAR ID COLON ID ASSIGN exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 52 (var_dec)


State 102

   50 ty: ARRAY OF ID •

    $default  reduce using rule 50 (ty)


State 103

   49 ty: LBRACE field_list RBRACE •

    $default  reduce using rule 49 (ty)


State 104

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   37 for_exp: FOR ID ASSIGN exp TO exp DO exp •

    $default  reduce using rule 37 (for_exp)


State 105

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   53 func_dec: FUNCTION ID LPAREN field_list RPAREN EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 53 (func_dec)


State 106

   54 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID • EQ exp

    EQ  shift, and go to state 107


State 107

   54 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID EQ • exp

    ID      shift, and go to state 1
    INT     shift, and go to state 2
    IF      shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    LET     shift, and go to state 6
    BREAK   shift, and go to state 7
    LPAREN  shift, and go to state 8

    exp         go to state 108
    var_exp     go to state 11
    var         go to state 12
    simple_var  go to state 13
    int_exp     go to state 14
    call_exp    go to state 15
    record_exp  go to state 16
    seq_exp     go to state 17
    assign_exp  go to state 18
    if_exp      go to state 19
    while_exp   go to state 20
    for_exp     go to state 21
    break_exp   go to state 22
    let_exp     go to state 23


State 108

    5 exp: exp • PLUS exp
    6    | exp • MINUS exp
    7    | exp • TIMES exp
    8    | exp • DIVIDE exp
   54 func_dec: FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp •

    PLUS    shift, and go to state 41
    MINUS   shift, and go to state 42
    TIMES   shift, and go to state 43
    DIVIDE  shift, and go to state 44

    $default  reduce using rule 54 (func_dec)
