%{
#include <stdio.h>
#include <stdlib.h>
#include "absyn.h"
#include "symbol.h"

void yyerror(E_Pos *locp, const char *s);
%}

%code {
    int yylex(YYSTYPE*, YYLTYPE*);
}

%union {
    int ival;
    char *sval;
    A_Exp exp;
    A_Var var;
    A_Dec dec;
    A_Type type;
    A_ExpList explist;
    A_DecList declist;
    A_EField efield;
    A_EFieldList efieldlist;
    A_Field field;
    A_FieldList fieldlist;
    A_FunDec fundec;
    A_FunDecList fundeclist;
}

%define api.location.type {E_Pos}
%define parse.error detailed 
%define api.pure full
%locations

%token <sval> ID
%token <ival> INT
%token PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
%token ASSIGN
%token ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
%token BREAK NIL
%token FUNCTION VAR TYPE
%token LPAREN RPAREN COMMA COLON SEMICOLON LBRACE RBRACE

%type <exp> program exp int_exp call_exp record_exp seq_exp assign_exp if_exp while_exp for_exp break_exp let_exp
%type <var> var_exp var simple_var
%type <explist> args exp_list exp_seq
%type <field> field
%type <fieldlist> field_list field_list_nonempty
%type <efield> efield
%type <efieldlist> efield_list efield_list_nonempty
%type <declist> dec_list dec_list_nonempty
%type <dec> dec var_dec func_dec type_dec
%type <type> ty


%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc EQ NEQ LT LE GT GE
%right ASSIGN
%nonassoc LOW_PRECEDENCE
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE

%start program

%%

program: exp { $$ = NULL; };

exp: var_exp { $$ = NULL; }
    | int_exp { $$ = NULL; }
    | call_exp { $$ = $1; }
    | exp PLUS exp   { $$ = NULL; }
    | exp MINUS exp  { $$ = NULL; }
    | exp TIMES exp  { $$ = NULL; }
    | exp DIVIDE exp { $$ = NULL; }
    | record_exp { NULL;}
    | seq_exp { NULL;}
    | assign_exp {$$ = NULL; }
    | if_exp { $$ = NULL; }
    | while_exp { $$ = NULL; }
    | for_exp { $$ = NULL;}
    | break_exp { $$ = NULL;}
    | let_exp { $$ = NULL; };

var_exp: var { $$ = NULL; }

var: simple_var { $$ = NULL; };

simple_var: ID { $$ = NULL; };

int_exp: INT { $$ = NULL; };

call_exp: ID LPAREN args RPAREN { $$ = NULL; };

args: /* empty */ { $$ = NULL; }
    | exp_list { $$ = NULL; }
    ;

exp_list: exp { $$ = make_A_ExpList($1, NULL); }
    | exp_list COMMA exp { $$ = NULL; }
    ;

exp_seq: exp { $$ = NULL; }
    | exp_seq SEMICOLON exp { $$ = NULL; }
    ;

record_exp: ID LBRACE efield_list RBRACE
          { $$ = NULL; };

field_list: /* empty */ { $$ = NULL; }
          | field_list_nonempty { $$ = NULL; }
          ;

field_list_nonempty: field { $$ = NULL; }
                   | field_list_nonempty COMMA field { $$ = NULL; }
                   ;

field: ID COLON ID { $$ = NULL; };

efield_list: /* empty */ { $$ = NULL; }
           | efield_list_nonempty { $$ = NULL; }
           ;

efield_list_nonempty: efield { $$ = NULL; }
                    | efield_list_nonempty COMMA efield { $$ = NULL; }
                    ;

efield: ID EQ exp { $$ = NULL; };


seq_exp: LPAREN exp_seq RPAREN { $$ = NULL; }
    ;

assign_exp: var ASSIGN exp { $$ = NULL; }
    ;

if_exp: IF exp THEN exp %prec LOWER_THAN_ELSE { $$ = NULL;}
    | IF exp THEN exp ELSE exp { $$ = NULL; }
    ;

while_exp: WHILE exp DO exp %prec LOW_PRECEDENCE { $$ = NULL; }
    ;

for_exp: FOR ID ASSIGN exp TO exp DO exp %prec LOW_PRECEDENCE { $$ = NULL; }
    ;

break_exp: BREAK { $$ = NULL; }
    ;

let_exp: LET dec_list IN exp_list END { $$ = NULL; }
    ;

dec_list: /* empty */ { $$ = NULL; }
    | dec_list_nonempty { $$ = NULL; }
    ;

dec_list_nonempty: dec { $$ = NULL; }
    | dec_list_nonempty dec { $$ = NULL; }
    ;

dec: type_dec { $$ = NULL;}
    | var_dec { $$ = NULL; }
    | func_dec { $$ = NULL; }
    ;

type_dec: TYPE ID EQ ty { $$ = NULL; };


ty: ID { $$ = NULL; }
    | LBRACE field_list RBRACE { $$ = NULL; }
    | ARRAY OF ID { $$ = NULL;}
    ;

var_dec: VAR ID ASSIGN exp { $$ = NULL; }
    | VAR ID COLON ID ASSIGN exp { $$ = NULL; }
    ;

func_dec: FUNCTION ID LPAREN field_list RPAREN EQ exp {
    $$ = NULL;
}
| FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp {
    $$ = NULL;
};

%% 
 void yyerror(YYLTYPE *locp, const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    fprintf(stderr, "Location: %d:%d - %d:%d\n", locp->first_line, locp->first_column, locp->last_line, locp->last_column);
}